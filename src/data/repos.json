[
  {
    "name": "AttendanceSystem",
    "description": null,
    "url": "https://github.com/edonberishaa/AttendanceSystem",
    "readme": "# üìò Attendance System\n\n## üìù Project Description\n\nThe **Attendance System** is a web-based application developed to streamline and automate student attendance tracking for professors. The system integrates with an **Arduino fingerprint scanner**, enabling seamless and secure attendance verification.\n\n**Key Features:**\n- Fingerprint-based student verification via Arduino.\n- Real-time updates using SignalR.\n- Attendance record filtering (by date/week).\n- Excel export functionality.\n- Subject and student management through an intuitive dashboard.\n\n**Tech Stack:**\n- **Backend:** ASP.NET Core  \n- **Database:** Entity Framework Core (SQL Server)  \n- **Real-time Communication:** SignalR  \n- **Hardware:** Arduino with fingerprint sensor  \n\n---\n\n## üë• Team Members\n\n| Name            | Role                                          |\n|-----------------|-----------------------------------------------|\n| Edon Berisha    | Full Stack Developer & Project Lead           |\n| Alban Rrahmani  | Hardware Engineer, Full-Stack Developer       |\n| Petrit Rexha    | Backend Developer, Data Analyst               |\n| Leutrim Istrefi | Node.js Developer                             |\n\n---\n\n## ‚öôÔ∏è How to Set Up\n\n### üîß Prerequisites\n\n**Software Requirements:**\n- [.NET 6 SDK](https://dotnet.microsoft.com/en-us/download) or later\n- Visual Studio or VS Code\n- SQL Server\n- [Arduino IDE](https://www.arduino.cc/en/software) (for hardware setup)\n\n**Hardware Requirements:**\n- Arduino board with fingerprint sensor module\n\n**Dependencies:**\nInstall the required NuGet packages:\n```bash\ndotnet add package Microsoft.EntityFrameworkCore\ndotnet add package Microsoft.EntityFrameworkCore.Tools\ndotnet add package Microsoft.EntityFrameworkCore.SqlServer\ndotnet add package ClosedXML\ndotnet add package Microsoft.AspNetCore.SignalR\n```\n\n## üîß Setup Instructions (Detailed)\n\n### 1. Clone the Repository:\n```bash\ngit clone https://github.com/edonberishaa/AttendanceSystem.git\ncd AttendanceSystem\n"
  },
  {
    "name": "BlogSiteCSE",
    "description": null,
    "url": "https://github.com/edonberishaa/BlogSiteCSE",
    "readme": "# BlogCSE üñ•Ô∏èüìù\nnote: Project in progress!\n\n[![.NET Version](https://img.shields.io/badge/.NET-8.0-blue)](https://dotnet.microsoft.com/)\n[![License](https://img.shields.io/badge/License-MIT-green)](https://opensource.org/licenses/MIT)\n[![GitHub Issues](https://img.shields.io/github/issues/edonberishaa/BlogCSE)](https://github.com/edonberishaa/BlogCSE/issues)\n\nA collaborative ASP.NET Core blog platform for computer science and engineering enthusiasts.\n\n![Blog Preview](https://via.placeholder.com/800x400.png?text=BlogCSE+Preview) <!-- Add real screenshot later -->\n\n## Features ‚ú®\n- üìù Create and manage technical blog posts\n- üîñ Tag system for C#/.NET, Algorithms, Web Development, etc.\n- üîç Full-text search functionality\n- üë• User authentication & authorization\n- üí¨ Comment system for discussions\n- üìà Analytics dashboard (WIP)\n- üåê Responsive UI with Bootstrap\n\n## Tech Stack üõ†Ô∏è\n- **Backend**: ASP.NET Core MVC\n- **Database**: Entity Framework Core + SQL Server (Azure-hosted)\n- **Frontend**: Razor Pages, Bootstrap 5, JavaScript\n- **Authentication**: ASP.NET Core Identity\n- **Real-Time**: SignalR (for future updates)\n- **Tools**: Git, Azure DevOps, Visual Studio 2022\n\n## Getting Started üöÄ\n\n### Prerequisites\n- [.NET 8 SDK](https://dotnet.microsoft.com/download)\n- [Visual Studio 2022+](https://visualstudio.microsoft.com/) or [VS Code](https://code.visualstudio.com/)\n- SQL Server Management Studio (SSMS)\n\n### Installation\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/edonberishaa/BlogCSE.git\n   cd BlogCSE\n   \n2. Configure the database:\n   - Update connection string in appsettings.json:\n     ```json\n     \"ConnectionStrings\": {\n     \"DefaultConnection\": \"Server=your-server;Database=BlogCSE;Trusted_Connection=True;\"\n     }\n3. Run database migrations:\n   ```bash\n   dotnet ef database update\n4. Start the application:\n   ```bash\n   dotnet run\n5. Visit `https://localhost:7274` in your browser\n## Contributing  ü§ù\nWe welcome contributions! Please follow these steps:\n1. Fork the repository\n2. Create your feature branch:\n   ```bash\n   git checkout -b feature/amazing-feature\n3. Commit your changes:\n   ```bash\n   git commit -m 'Add some amazing feature'\n4. Push to the branch:\n   ```bash\n   git push origin feature/amazing-feature\n5. Open a Pull Request\n## License üìÑ\nThis project is licensed under the MIT License.\n## Acknowledgments üéì\n- [Edon Berisha](https://github.com/edonberishaa/) - Project Maintainer\n- [Alban Rrahmani](https://github.com/albanrr9) - Core Contributor\n\n**Happy Coding! üë®üíªüë©üíª**\n"
  },
  {
    "name": "BookStoreApp",
    "description": null,
    "url": "https://github.com/edonberishaa/BookStoreApp",
    "readme": "# BookStoreApp\n\n## Overview\nBookStoreApp is a web application being developed using ASP.NET and Angular. The primary goal of this project is to create a comprehensive platform for managing and purchasing books. While the project is still in progress, significant steps have been taken towards building its core functionality.\n\n## Current Features\n1. **User Interface:**\n   - Basic layout and navigation have been implemented.\n   - Users can view the initial structure of the application.\n\n2. **Database Integration:**\n   - Initial setup of the database is complete, ensuring a robust backend.\n   - Tables for managing book details and user data have been partially created.\n\n3. **Book Management System:**\n   - Users can add and view book details (title, author, price, etc.).\n   - Edit and delete functionalities are in progress.\n\n4. **Authentication System:**\n   - Basic login and registration features are partially implemented.\n\n5. **API Integration:**\n   - APIs are used to connect the front-end with the back-end seamlessly.\n\n6. **Entity Framework:**\n   - Entity Framework is utilized for database operations, enabling efficient ORM functionality.\n\n## Technologies Used\n- **Framework:** ASP.NET\n- **Frontend:** AngularJS\n- **Backend:** C#\n- **Database:** SQL Server\n- **ORM:** Entity Framework\n- **API:** RESTful APIs\n\n## To-Do List\n1. **Complete User Authentication:**\n   - Implement password encryption.\n   - Add role-based access control for admin and regular users.\n\n2. **Enhance Book Management:**\n   - Finalize CRUD operations for books.\n   - Add advanced search and filter options.\n\n3. **Shopping Cart:**\n   - Allow users to add books to a shopping cart.\n   - Integrate payment gateway for purchases.\n\n4. **UI/UX Improvements:**\n   - Design a more user-friendly interface.\n   - Optimize for mobile devices.\n\n5. **Testing and Debugging:**\n   - Perform thorough testing of all modules.\n   - Fix any identified bugs and issues.\n\n6. **Deployment:**\n   - Prepare the application for deployment.\n   - Deploy the app to a cloud platform.\n\n## Installation\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/edonberishaa/BookStoreApp\n   ```\n2. Open the project in Visual Studio.\n3. Restore NuGet packages.\n4. Configure the database connection in `appsettings.json`.\n5. Run the application.\n\n## Contribution\nContributions are welcome! Feel free to fork the repository and submit pull requests for review.\n\n## Current Status\nThis project is under development and is not yet complete. The features mentioned above are either in progress or planned for future implementation.\n\n## License\nThis project is licensed under the MIT License. See the LICENSE file for details.\n\nThe project is not completed yet!\n\nEdon Berisha\n---\n\nStay tuned for updates as development progresses!\n\n"
  },
  {
    "name": "CakeProduction",
    "description": null,
    "url": "https://github.com/edonberishaa/CakeProduction",
    "readme": "# üéÇ Cake Production Management System\n\n_A bakery management solution for production tracking, inventory control, and sales management_\n\n## ‚ú® Current Features\n\n### üè≠ Production Management\n- Recipe management with ingredient lists\n- Production scheduling\n- Yield calculations (quantity/unit)\n\n### üì¶ Inventory Control\n- Real-time stock monitoring\n- Low-stock email alerts\n- Supplier information tracking\n\n### üë®‚Äçüç≥ User Management\n- Role-based access (Admin, Baker, Manager)\n- Secure authentication\n- Activity logging\n\n## üõ†Ô∏è Tech Stack\n\n### Backend\n- ASP.NET Core 7.0\n- Entity Framework Core\n- SQL Server 2022\n- Hangfire (for background email alerts)\n\n### Frontend\n- Razor Pages\n- jQuery + AJAX\n- Bootstrap 5.2\n- Chart.js (basic reporting)\n\n## üöÄ Installation Guide\n\n### Prerequisites\n- .NET 9.0 SDK\n- SQL Server 2019+\n"
  },
  {
    "name": "ExamApplication",
    "description": null,
    "url": "https://github.com/edonberishaa/ExamApplication",
    "readme": "ExamApplication is a C# Desktop application designed to simplify the process of managing and taking exams.\nYou can create questions with 4 possible answers or less.\nYou create the question,possible answers and choose the correct answer.\nThe exam can be held online or in the right part of the application you can see all the questions you've created and you have the possibility to print them in A4 format by double-clicking.\nIt is fully developed with C#\n"
  },
  {
    "name": "FaceId-Authentication",
    "description": null,
    "url": "https://github.com/edonberishaa/FaceId-Authentication",
    "readme": "No README found."
  },
  {
    "name": "MovieTickets",
    "description": "Movie Ticket Management Web application using ASP.NET Core MVC",
    "url": "https://github.com/edonberishaa/MovieTickets",
    "readme": "Movie Tickets selling Web Application that includes CRUD operations, connection with database(SQL Server) ,payment integration and much more\nThis website is made during a course I'm taking in ASP.NET Core MVC 5\nNot fully completed!\n"
  },
  {
    "name": "PcManagmentDesktopApp",
    "description": null,
    "url": "https://github.com/edonberishaa/PcManagmentDesktopApp",
    "readme": "# PC Management Desktop App\n\n## Overview\nThe **PC Management Desktop App** is a C# Windows Forms application integrated with an SQL Server database, designed to manage and track PC usage in a gaming center. It allows operators to start and stop timers for individual computers, automatically calculating usage duration and earnings. The system also maintains a history of PC usage, order transactions, and a financial summary for better management.\n\n## Features\n- **PC Usage Tracking**: Start and stop timers for each PC to track playtime.\n- **Automated Billing**: Calculates the cost based on the duration of use.\n- **Order Management**: Add and manage orders (e.g., snacks, drinks) per PC.\n- **Real-time Price Updates**: Synchronizes product prices and calculates totals dynamically.\n- **Financial Summary**: Displays total earnings per PC and overall revenue.\n- **User Authentication**: Secure login system with an SQL Server database.\n- **Data Persistence**: Stores and retrieves PC usage, earnings, and orders from the database.\n\n## Installation\n### Prerequisites\n- Windows OS\n- .NET Framework (version used in development)\n- SQL Server (for database management)\n- Visual Studio (for development and debugging)\n\n### Steps\n1. Clone this repository:\n   ```sh\n   git clone https://github.com/edonberishaa/PcManagmentDesktopApp\n   ```\n2. Open the solution in **Visual Studio**.\n3. Restore NuGet packages and ensure all dependencies are installed.\n4. Set up the **SQL Server database**:\n5. Build and run the application.\n\n## Database Schema\n### Tables\n- **Computers**: Stores computer details and statuses.\n- **Orders**: Manages product orders for each session.\n- **Users**: Stores authentication details.\n- **UsageHistory**: Tracks time and earnings for each PC session.\n\n## Usage\n1. **Login** to access the dashboard.\n2. Select a PC and click **Start Timer** to begin tracking usage.\n3. Click **Stop Timer** when the session ends, and the total cost will be calculated.\n4. Add orders (snacks, drinks) if required.\n5. Double-click to get the invoice\n6. Monitor revenue and PC usage history in the financial summary section.\n\n## Technologies Used\n- **C# (Windows Forms)** for the UI and business logic.\n- **SQL Server** for data storage and management.\n\n## Future Enhancements\n- Adding **remote access features** to manage PCs from another device.\n- Enhancing **UI/UX** with modern design elements.\n- Adding **multi-user roles** for admin and operator management.\n\n## Contributing\n1. Fork the repository.\n2. Create a new branch (`feature-branch`).\n3. Commit your changes and push to GitHub.\n4. Open a pull request for review.\n\n## License\nThis project is licensed under the **MIT License**. See `LICENSE` for more details.\n\n## Contact\nFor inquiries or contributions, contact **Edon Berisha** at edonberisha52@gmail.com\n\n"
  },
  {
    "name": "StudentsTranscript",
    "description": null,
    "url": "https://github.com/edonberishaa/StudentsTranscript",
    "readme": "Students transcript API using ASP.NET core Web API\n"
  },
]